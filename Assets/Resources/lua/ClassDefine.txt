import "UnityEngine"

if not UnityEngine.GameObject or not  UnityEngine.UI then
	error("Click Make/All to generate lua wrap file")
end

local class={}

local Goods={
	rank=0,
	imageId=0
	}

function Goods:New(id)
	id=id or 0
	if type(id) ~= "number" then
		return print("Error init_Goods type")
	end
	self.rank=id
	self.imageId=id
	o={}
	self.__index=self
	setmetatable(o,self)
	return o
end

local Grid={
	goods={},
	amount=0,
	image=UI.Image,
	text=UI.Text,
	gridClick={}
	}

function Grid:New(image,text,gridClick)
	image=image or {}
	text=text or {}
	gridClick=gridClick or {}
	o={}
	self.goods=Goods:New()
	self.image=image
	self.text=text
	self.gridClick=gridClick
	self.__index=self
	setmetatable(o,self)
	return o
end

function Grid:Clear()
	self.goods=Goods:New()
	self.amount=0
	self.image.sprite=Resources.Load("Image/"..self.goods.imageId)
	self.text.text=""
end

function Grid:Update(id)
	id=id or 0
	if type(id) ~= "number" then
		return print("Error Update Goods type")
	end
	self.goods=Goods:New(id)
	self.amount=1
	self.image.sprite=Resources.Load("Image/"..self.goods.imageId)
	self.text.text=self.amount
end

local GridData={}

function GridData:New(o)
	o=o or {}
	self.__index=self
	setmetatable(o,self)
	return o
end

local FileOperation={}

function FileOperation:Save(playerData)
	if type(playerData) == "nil" then
		print("Empty backpack")
		return false
	end
	local data=Serialize(playerData)
	local file=io.open("playerData.txt","w")
	io.output(file)
	io.write(data)
	io.close(file)
	return true
end

function FileOperation:Load()
	local file=io.open("playerData.txt","r")
	if type(file) == "nil" then
		print("Loading file error")
		return nil
	end
	io.input(file)
	local data=io.read("a")
	local playerData=Unserialize(data)
	return playerData
end

function main()
	return class
end














